---
title: "Creating data plots for effective decision-making using statistical inference with R"
author: "Dianne Cook <br> Monash University"
format:
  revealjs: 
    theme: 
      - default
      - custom.scss
    slide-number: c/t
    chalkboard: true
code-line-numbers: false
message: false
highlight-style: pygments
footer: "[https://github.com/StatSocAus/tutorial_effective_data_plots](https://github.com/StatSocAus/tutorial_effective_data_plots)"
---

```{r, include = FALSE}
#| label: libraries-for-participants
library(tidyverse)
library(colorspace)
library(patchwork)
library(broom)
library(palmerpenguins)
library(ggbeeswarm)
```

```{r, include = FALSE}
#| label: code-for-nice-slides
library(DT)

options(width = 200)
knitr::opts_chunk$set(
  fig.width = 3,
  fig.height = 3,
  fig.align = "center",
  dev.args = list(bg = 'transparent'),
  out.width = "100%",
  fig.retina = 3,
  echo = FALSE,
  warning = FALSE,
  message = FALSE,
  cache = FALSE
)
theme_set(ggthemes::theme_gdocs(base_size = 12) +
  theme(plot.background = 
        element_rect(fill = 'transparent', colour = NA),
        axis.line.x = element_line(color = "black", 
                                   linetype = "solid"),
        axis.line.y = element_line(color = "black", 
                                   linetype = "solid"),
        plot.title.position = "plot",
        plot.title = element_text(size = 18),
        panel.background  = 
          element_rect(fill = 'transparent', colour = "black"),
        legend.background = 
          element_rect(fill = 'transparent', colour = NA),
        legend.key        = 
          element_rect(fill = 'transparent', colour = NA)
  ) 
)
```

```{r}
#| echo: false
#| eval: false
# divergingx_hcl(palette="Zissou 1", n=10)
# [1] "#3B99B1" "#40ABA5" "#6FB798" "#9FC095" "#C7C98A"
# [6] "#EABE23" "#E8A419" "#E78802" "#EA6400" "#F5191C"
# specplot(divergingx_hcl(palette="Zissou 1", n=10))
```

## Session 1: Making effective plots using ggplot2's grammar of graphics {.center .center-align}

## Outline

```{r}
plan <- tribble(~time, ~topic,
                "1:00-1:15", "Why, philosophy and benefits",
                "1:15-1:35", "Organising data to map variables to plots", 
                "1:35-2:05", "Making a variety of plots",
                "2:05-2:30", "Do but don't, and cognitive principles", 
                "2:30-3:00", "BREAK")
knitr::kable(plan)
```

## Why

:::: {.columns}

::: {.column width=50%}

```{r}
#| fig-width: 3
#| fig-height: 3
#| out-width: 100%
cars_lm <- lm(mpg ~ hp, data = mtcars)
cars_all <- augment(cars_lm)
ggplot(cars_all, aes(x=.fitted, y=.resid)) + geom_point()
```

:::

::: {.column width=50%}

Is there any pattern in the residuals that indicate a problem with the model fit?

<br>

::: {style="font-size: 90%;"}
Do we need to change the model specification?
:::

:::

::::

## Why

:::: {.columns}

::: {.column width=60%}

```{r}
#| message: false
#| warning: false
library(StatsBombR)
library(SBpitch)
load("data/aus_brazil.rda")
shots = aus_brazil %>%
  filter(type.name=="Shot" & is.na(pass.outcome.name))
create_Pitch(grass_colour = "#FFFFFF",
             background_colour =  "#FFFFFF") +   
  geom_point(data=shots, aes(x=location.x, y=location.y,
                   colour=possession_team.name))  +
  scale_color_discrete_divergingx(palette="Zissou 1") + 
  coord_equal() +
  theme(legend.title = element_blank(), 
        legend.position = "bottom",
        legend.direction = "horizontal",
        legend.background = 
          element_rect(fill = 'transparent', colour = NA),
        axis.line.x = element_blank(),
        axis.line.y = element_blank(),
        legend.key = 
          element_rect(fill = 'transparent', colour = NA))
```

:::

::: {.column width=40%}

<br><br>
Do the teams have different shot styles?

::: {style="font-size: 60%;"}
(From the Women's 2019 World Cup Soccer)
:::

::: {style="font-size: 80%;"}
Is there a defensive strategy that might prevent Brazil scoring (in the next match)? 
:::

:::

::::

## Why


```{r}
#| label: tb-trend
#| message: false
#| warning: false
#| fig-width: 6
#| fig-align: center
tb <- read_csv(here::here("data/TB_notifications_2023-08-21.csv"))
tb_sub <- tb %>%
  filter(iso3 %in% c("AUS", "IDN")) %>%
  filter(year > 1996)
ggplot(tb_sub, aes(x=year, y=c_newinc, colour=iso3)) + 
  geom_point() +
  geom_smooth(se=F) +
  scale_x_continuous("Year", breaks = seq(1980, 2020, 10), labels = c("80", "90", "00", "10", "20")) +
  ylab("TB incidence") +
  scale_colour_discrete_divergingx(palette="Zissou 1") + 
  facet_wrap(~iso3, ncol=2, scales="free_y") +
  theme(legend.position = "none")

```

<center>
<br>
Is TB getting worse? (In Australia and Indonesia)

::: {style="font-size: 60%;"}
(From the [World Health Organisation (WHO)](https://www.who.int/teams/global-tuberculosis-programme/data.)]
:::

</center>

## Why

<center>
<br>
Which is the best display to answer the previous question?

</center>


```{r}
#| label: aus-tb-trend
#| message: false
#| warning: false
#| fig-width: 6
#| fig-align: center
tb_aus <- tb %>%
  filter(iso3 == "AUS") %>%
  filter(year > 1996)
p1 <- ggplot(tb_aus, aes(x=year, y=c_newinc)) + 
  geom_point() +
  geom_smooth(se=F, colour="#F5191C") +
  scale_x_continuous("Year", breaks = seq(1980, 2020, 10), labels = c("80", "90", "00", "10", "20")) +
  ylab("TB incidence") +
  ggtitle("Plot A")

p2 <- ggplot(tb_aus, aes(x=year, y=c_newinc)) + 
  geom_col(fill="#F5191C") +
  scale_x_continuous("Year", breaks = seq(1980, 2020, 10), labels = c("80", "90", "00", "10", "20")) +
  ylab("TB incidence") +
  ggtitle("Plot B")

p1 + p2
```


## What's the goal? 

<br>

Reading data plots is <span style="color: #F5191C;">subjective</span>. 

::: {.fragment} 
<br> Making decisions based on data visualisations is common, where <span style="color: #3B99B1;"> we need to be  objective </span>. 
:::

::: {.fragment style="margin-left:230px"} 
<br><br><br> It is possible, and <span style="color: #3B99B1;"> here is how we do that ...</span>
:::

## These are the tools you need

:::: {.columns]

::: {.column width=45%}

::: {.textbox}

![](https://ggplot2.tidyverse.org/logo.png){width="150px"} 

```{r}
#| eval: false
#| echo: true
install.packages("ggplot2")
```

::: {style="font-size: 60%;"}
or better yet:
:::

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
install.packages("tidyverse")
```

::: {style="font-size: 60%;"}

- Define your plots using a grammar that maps variables in tidy data to elements of the plot.
- Wrangle your data into tidy form for clarity of plot specification.
:::

:::

:::

::: {.column width=8%}
<span style="color: #FFFFFF;"> space </span>
:::

::: {.column width=45%}
::: {.textbox}

![](https://dicook.github.io/nullabor/reference/figures/nullabor_hex.png){width="170px"}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
install.packages("nullabor")
```

::: {style="font-size: 60%;"}
- Compare your data plot to plots of null data.
- This checks whether what we see is real or spurious.
- Also allows for measuring the effectiveness of one plot design vs another.

:::

:::
:::

::::

## Organising your data to enable mapping variables to graphical elements {.center}

## Tidy data


![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6e297111-efb7-4555-93d2-085071d1853c_rw_1920.jpg?h=f1951b118eaddaaab8a572422bc16566){.absolute top=0 right=0 width="550"}

<br><br><br><br>

1. **Each variable forms a column**
2. **Each observation forms a row**
3. **Each type of observational unit forms a table.** If you have data on multiple levels (e.g. data about houses and data about the rooms within those houses), these should be in separate tables.

::: {style="font-size: 40%;"}

Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by [Julia Lowndes and Allison Horst](https://allisonhorst.com/other-r-fun)
:::


## YOUR TURN {.center}

For each of the following data discuss whether it is in tidy form.

## Data 1: tuberculosis from WHO

::: {style="font-size: 50%;"}

```{r}
#| message: false
#| warning: false
tb_aus %>%
  select(iso3, year, newrel_m014:newrel_m65, newrel_f014:newrel_f65) %>%
  filter(year > 2012) %>%
  slice_head(n=11) %>% 
  datatable(options = list(dom = 't'))
```

:::

## Data 2: Graduate programs 

::: {style="font-size: 40%;"}

```{r}
#| message: false
#| warning: false
grad <- read_csv(here::here("data/graduate-programs.csv"))
grad %>% slice_head(n=7) %>% datatable(options = list(dom = 't'))
```

:::

## Data 3: GHCN weather station records 

::: {style="font-size: 50%;"}

```{r}
#| message: false
#| warning: false
#| eval: false
melbtemp <- read.fwf(here::here("data/ASN00086282.dly"), 
   c(11, 4, 2, 4, rep(c(5, 1, 1, 1), 31)), fill=T)
datatable(melbtemp[1:12,c(1,2,3,4,seq(5,100,4))], options = list(dom = 't'))
```

```{r}
#| eval: false
# Melbourne airport weather
library(rnoaa)
stations <- ghcnd_stations()
melbourne <- ghcnd("ASN00086282") #MELBOURNE AIRPORT
save(melbourne, file="data/melbourne.rda")
```

```{r}
#| message: false
#| warning: false
load("data/melbourne.rda") 
datatable(melbourne[2100:2110,c(1,2,3,4,seq(5,128,4))], options = list(dom = 't'))
```

:::

## Answers

:::: {.columns}
::: {.column width=33%}
::: {.textbox}

**Data 1**: <br><span style="color: #F5191C;">Not in tidy form</span>

- iso3
- year 
- gender 
- age

:::
:::

::: {.column width=33%}
::: {.fragment .fade-in}
::: {.textbox}

**Data 2**: <br><span style="color: #3B99B1;">It's in tidy form!</span>

- subject
- inst
- AvNumPubs
- AvNumCits
- ...

:::
:::
:::

::: {.column width=33%}
::: {.fragment .fade-in}
::: {.textbox}

**Data 3**: <br><span style="color: #F5191C;">Not in tidy form</span>

- station
- year
- month
- day
- TMAX
- TMIN
- PRCP
:::
:::
:::
::::

## Statistical data

$$X = \left[ \begin{array}{rrrr}
           X_{~1} & X_{~2} & ... & X_{~p} 
           \end{array} \right] \\
  = \left[ \begin{array}{rrrr}
           X_{~11} & X_{~12} & ... & X_{~1p} \\
           X_{~21} & X_{~22} & ... & X_{~2p} \\
           \vdots & \vdots & \ddots& \vdots \\
           X_{~n1} & X_{~n2} & ... & X_{~np}
           \end{array} \right]$$

- <span style="color: #3B99B1;">This is tidy data!</span>
- You might also make assumptions about the distribution of each variable, e.g. $X_{~1} \sim N(0,1), ~~X_{~2} \sim \text{Exp}(1) ...$

## Mapping

In `ggplot2`, the variables from tidy data are explicitly mapped to elements of the plot, using `aesthetics`.

:::: {.columns}

::: {.column width=49%}
::: {style="font-size: 50%;"}

**Basic Mappings**

- `x` and `y` to plot points in a two-dimensional space
- `color`, `fill` to render as a color scale
- `size` maps variable to size of object
- `shape` maps variable to different shapes

Depending on the `geom` different mappings are possible, `xmin`, `xend`, `linetype`, `alpha`, `stroke`, `weight` ...

**Facets**

Variables are used to subset (or condition)

**Layers**

Different data can be mapped onto the same plot, eg observations, and means


:::
:::

::: {.column width=49%}
::: {.fragment}
**Example**

```{r}
#| echo: true
#| eval: false
ggplot(mpg, 
       aes(
         x=displ, 
         y=hwy, 
         color=class)) + 
  geom_point()
```

::: {style="font-size: 60%;"}

`displ` is mapped to `x`<br> 
`hwy` is mapped to `y`<br> 
`class` is mapped to `color`.
:::

:::

:::

::::

## Common plot descriptions as scripts {.center}


## Example 1A

:::: {.columns}

::: {.column width=49%}

How are variables mapped to create this plot?

```{r}
#| label: aus-tb
#| fig-height: 2.5
ggplot(tb_aus, 
       aes(x=year, 
           y=c_newinc)) + 
  geom_point() +
  scale_x_continuous("Year", 
    breaks = seq(1980, 2020, 10), 
    labels = c("80", "90", "00", "10", "20")) +
  ylab("TB incidence") 
```
:::

::: {.column width=49%}
<br><br>
```{r}
#| label: aus-tb
#| echo: true
#| eval: false
#| code-summary: "Code for AUS TB plot"
#| code-fold: true

```
:::

::::

## Example 1B

:::: {.columns}

::: {.column width=49%}

How are variables mapped to create this plot?

```{r}
#| label: aus-tb-bar
#| fig-height: 2.5
ggplot(tb_aus, aes(x=year, y=c_newinc)) + 
  geom_point() +
  geom_smooth(se=F, colour="#F5191C") +
  scale_x_continuous("Year", breaks = seq(1980, 2020, 10), labels = c("80", "90", "00", "10", "20")) +
  ylab("TB incidence") 
```
:::

::: {.column width=49%}
<br><br>
```{r}
#| label: aus-tb-bar
#| echo: true
#| eval: false
#| code-summary: "Code for AUS TB plot"
#| code-fold: true

```
:::

::::

## Example 2A

:::: {.columns}

::: {.column width=49%}

How are variables mapped to create this plot?

```{r}
#| label: penguins1
#| fig-height: 3.5
#| out-width: 80%
ggplot(penguins, 
       aes(x=flipper_length_mm, 
           y=bill_length_mm, 
           color=species)) + 
  geom_point(alpha=0.8) +
  scale_color_discrete_divergingx(palette="Zissou 1") +
  theme(legend.title = element_blank(), 
        legend.position = "bottom",
        legend.direction = "horizontal",
        legend.text = element_text(size="8"))
```
:::

::: {.column width=49%}
<br><br>
```{r}
#| label: penguins1
#| echo: true
#| eval: false
#| code-summary: "Code for penguins plot"
#| code-fold: true
```
:::

::::

## Example 2B

:::: {.columns}

::: {.column width=49%}

How are variables mapped to create this plot?

```{r}
#| label: penguins2
#| fig-height: 3.5
#| out-width: 80%
ggplot(penguins, 
       aes(x=flipper_length_mm, 
           y=bill_length_mm, 
           color=species)) + 
  geom_density2d(alpha=0.8) +
  scale_color_discrete_divergingx(palette="Zissou 1") +
  theme(legend.title = element_blank(), 
        legend.position = "bottom",
        legend.direction = "horizontal",
        legend.text = element_text(size="8"))
```
:::

::: {.column width=49%}
<br><br>
```{r}
#| label: penguins2
#| echo: true
#| eval: false
#| code-summary: "Code for penguins plot"
#| code-fold: true

```
:::

::::

## Example 3 <span style="font-size: 70%;"> (1/5) </span>

:::: {.columns}

::: {.column width=49%}

First get the data in tidy form

```{r}
#| echo: true
tb_aus_sa <- tb_aus %>%
  filter(year > 2012) %>%
  select(iso3, year, 
         newrel_f014:newrel_f65, 
         newrel_m014:newrel_m65) %>%
  pivot_longer(cols=newrel_f014:newrel_m65,
               names_to = "sex_age", 
               values_to = "count") %>%
  filter(!is.na(count)) %>%
  separate(sex_age, into=c("stuff", 
                           "sex_age")) %>%
  mutate(sex = str_sub(sex_age, 1, 1),
         age = str_sub(sex_age, 2, 
                       str_length(sex_age))) %>%
  mutate(age = case_when(
    age == "014" ~ "0-14",
    age == "1524" ~ "15-24",
    age == "2534" ~ "25-34",
    age == "3544" ~ "35-44",
    age == "4554" ~ "45-54",
    age == "5564" ~ "55-64",
    age == "65" ~ "65")) %>%
  select(iso3, year, sex, age, count)
```
:::

::: {.column width=49%}

::: {.fragment}

::: {style="font-size: 50%;"}
<br>
```{r}
tb_aus_sa %>% datatable(options = list(dom = 't'))
```
:::

:::

:::

::::

## Example 3 <span style="font-size: 70%;"> (2/5) </span>

:::: {.columns}

::: {.column width=49%}

How many ways can we plot all three variables?

::: {style="font-size: 40%;"}
<br>
```{r}
tb_aus_sa %>% datatable(options = list(dom = 't'))
```
:::

:::

::: {.column width=15%}


:::

::: {.column width=25%}

::: {.fragment .textbox style="font-size: 50%;"}

`geom`: bar + position (stack, dodge, fill)

`aes`:

- Var 1 to `x`
- `count` to `y`
- Var 2 to `color`
- Var 3 to `facet`

:::

::: {.fragment .textbox style="font-size: 50%;"}

`geom`: point + smooth

`aes`:

- Var 1 to `x`
- `count` to `y`
- Var 2 to `color`
- Var 3 to `facet`

:::
:::

::::

## Example 3 <span style="font-size: 70%;"> (3/5) </span>


```{r}
#| fig-height: 2.5
#| fig-width: 10
#| out-width: 100%
ggplot(tb_aus_sa, 
       aes(x=year, 
           y=count, 
           fill=sex)) + 
  geom_col(position="fill") +
  facet_wrap(~age, ncol=7) +
  ylab("") +
  scale_fill_discrete_divergingx(palette="ArmyRose") +
  scale_x_continuous("year", 
    breaks = seq(2013, 2021, 2), 
    labels = c("13", "15", "17", "19", "21")) +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal",
        legend.title = element_blank(),
        axis.text = element_text(size="10"))
```

::: {style="font-size: 60%;"}
How are variables mapped to create this plot?

`geom`: bar/position="fill"

`year` to `x` $~~~~$ `count` to `y` $~~~~$ `fill` to `sex` $~~~~$ `facet` by `age`

:::

::: {.fragment style="font-size: 60%;"}
<br>
Observations: Relatively equal proportions, with more incidence among males in older population. No clear temporal trend. 
:::


## Example 3 <span style="font-size: 70%;"> (4/5) </span>


```{r}
#| fig-height: 4
#| fig-width: 10
#| out-width: 80%
ggplot(tb_aus_sa, 
       aes(x=year, 
           y=count, 
           fill=sex)) + 
  geom_col() +
  facet_grid(sex~age, scales = "free_y") +
  ylab("count") +
  scale_fill_discrete_divergingx(palette="ArmyRose") +
  scale_x_continuous("year", 
    breaks = seq(2013, 2021, 2), 
    labels = c("13", "15", "17", "19", "21")) +
  theme(legend.position = "none",
        axis.text = element_text(size="10"))
```

:::: {.columns}
::: {.column width=50%}
::: {style="font-size: 60%;"}

`geom`: bar

`year` to `x` $~$ `count` to `y` $~$ 
`fill` and `facet` to `sex` $~$ `facet` by `age`

:::
:::

::: {.column width=30%}
::: {.fragment style="font-size: 60%;"}
Incidence is higher among young adult groups, and older males. 
:::

::: {.fragment style="font-size: 60%;"}
Where's the temporal trend? 
:::
:::
::::

::: {.fragment}
![](slides1_files/figure-revealjs/aus-tb-trend-1.png){.absolute width="250" left=850 top=540}
:::

## Example 3 <span style="font-size: 70%;"> (5/5) </span>


```{r}
#| fig-height: 4
#| fig-width: 10
#| out-width: 80%
ggplot(tb_aus_sa, 
       aes(x=year, 
           y=count, 
           colour=sex)) + 
  geom_point() +
  geom_smooth(se=F, alpha=0.7) +
  facet_grid(sex~age, scales = "free_y") +
  ylab("count") +
  scale_colour_discrete_divergingx(palette="ArmyRose") +
  scale_x_continuous("year", 
    breaks = seq(2013, 2021, 2), 
    labels = c("13", "15", "17", "19", "21")) +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal",
        legend.title = element_blank(),
        axis.text = element_text(size="10"))
```

:::: {.columns}
::: {.column width=50%}

::: {style="font-size: 60%;"}

`geom`: point, smooth

`year` to `x` $~$ `count` to `y` $~$ `colour` and `facet` to `sex` $~$ `facet` by `age`

:::

:::
::: {.column width=30%}

::: {.fragment style="font-size: 60%;"}
<br>
Temporal trend is only present in some groups.
:::
:::
::::

::: {.fragment}
![](slides1_files/figure-revealjs/aus-tb-trend-1.png){.absolute width="250" left=850 top=540}
:::

## Tidy data to many plot descriptions

:::: {.columns}

::: {.column style="font-size: 60% width: 30%;"}
::: {.textbox}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(tb_aus_sa, 
       aes(x=year, 
           y=count, 
           fill=sex)) + 
  geom_col(position="fill") +
  facet_wrap(~age)
```
:::
:::

::: {.column .fragment style="font-size: 60% width: 30%;"}
::: {.textbox}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(tb_aus_sa, 
       aes(x=year, 
           y=count, 
           fill=sex)) + 
  geom_col() +
  facet_grid(sex~age)
```
:::
:::

::: {.column .fragment style="font-size: 60% width: 30%;"}
::: {.textbox}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5,6"
ggplot(tb_aus_sa, 
       aes(x=year, 
           y=count, 
           colour=sex)) + 
  geom_point() +
  geom_smooth() +
  facet_grid(sex~age)
```
:::
:::

::: {.column}
::: {.r-stack}

::: {.fragment style="font-size: 200%;" }
?
:::

::: {.fragment}
::: {.textbox}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2,6"
ggplot(tb_aus_sa, 
       aes(x=age, 
           y=count, 
           fill=sex)) + 
  geom_col(position="fill") +
  facet_wrap(~year)
```
:::
:::

:::
:::
::::

## Re-arrangements

```{r}
#| fig-height: 6
#| fig-width: 10
#| out-width: 100%
ggplot(tb_aus_sa, 
       aes(x=age, 
           y=count, 
           fill=sex)) + 
  geom_col(position="fill") +
  facet_wrap(~year, ncol=3) +
  ylab("proportion") +
  scale_fill_discrete_divergingx(palette="Fall") +
  theme(legend.title = element_blank(),
        axis.text = element_text(size="10"))
```


## Scaling

This might have slipped under the radar, but different displays had some different scaling of the data:

Slides 6, 27, 28 (Why, Example 3 4,5/5) were constructed with

```{r}
#| eval: false
#| echo: true
facet_wrap(..., scales="free_y")
``` 

<br>
**Why?**

::: {.fragment}
The emphasis was comparing difference in trend not magnitude of values.
:::

## Exercise

::: {.center}
1. Create two new plot arrangements of the Australian TB data. What do they put the focus on?
2. Change the scaling on one of the plots, where it will change the appearance. How does the information change?
:::

## Do's and don'ts {.center}

## Plot descriptions

Use a new variable in a single data set - avoid multiple data sets <span style="font-size: 60%;"> (Tidy data principle) </span>

:::: {.columns}

::: {.column width=50%}

GOOD

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "6"
ggplot(tb_sub, aes(x=year, 
                   y=c_newinc, 
                   colour=iso3)) + 
  geom_point() +
  geom_smooth(se=F) +
  facet_wrap(~iso3, ncol=2, 
             scales="free_y") +
  theme(legend.position = "none")
```

:::

::: {.column width=50%}

BAD

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2,4,5,7,8,10,11,13"
ggplot() + 
  geom_point(data = tb_aus, 
    aes(x=year, y=c_newinc), 
    colour="#F5191C") +
  geom_point(data = tb_idn, 
    aes(x=year, y=c_newinc), 
    colour="#3B99B1") +
  geom_smooth(data = tb_aus, 
    aes(x=year, y=c_newinc), 
    colour="#F5191C", se=F) +
  geom_smooth(data = tb_idn, 
    aes(x=year, y=c_newinc), 
    colour="#3B99B1", se=F) 
```

:::
::::

## Cognitive principles {.center}

## Hierarchy of mappings 

```{r}
vis_spacing <- 'style="padding-left:20px;"'
vis_spacing1 <- 'style="padding-left:10px;"'
```

<img src="images/task-position-common-scale-1.svg" width="200px"><img src="images/task-position-non-aligned-scale-1.svg" width="200px" `r vis_spacing1`><img src="images/task-length-1.svg"  width="200px" `r vis_spacing1`><img src="images/task-direction-1.svg"  width="200px" `r vis_spacing1`><img src="images/task-angle-1.svg"  width="200px" `r vis_spacing1`>

<img src="images/task-area-1.svg"  width="200px"><img src="images/task-volume-1.svg"  width="200px" `r vis_spacing1`><img src="images/task-curvature-1.svg"  width="200px" `r vis_spacing1`><img src="images/task-texture.svg" `r vis_spacing1` width="200px"><img src="images/task-shape-1.svg"  width="200px" `r vis_spacing1`>

Cleveland and McGill (1984)

::: {.f50}
<center>
<br><br>Illustrations made by Emi Tanaka
</center>
:::

## Hierarchy of mappings 

:::: {.columns}

::: {.column width=50%}
1. Position - common scale (BEST)
2. Position - nonaligned scale
3. Length, direction, angle
4. Area
5. Volume, curvature
6. Shading, color (WORST)
:::

::: {.column width=50% .fragment}
1. scatterplot, barchart
2. side-by-side boxplot, stacked barchart
3. piechart, rose plot, gauge plot, donut, wind direction map, starplot
4. treemap, bubble chart, mosaicplot
5. chernoff face
6. choropleth map

:::

::::

## Proximity

Place elements that you want to compare close to each other. If there are multiple comparisons to make, you need to decide which one is most important.

:::: {.columns}

::: {.column width=50%}

```{r}
#| fig-width: 7
#| fig-height: 5
ggplot(tb_aus_sa, 
       aes(x=year, 
           y=count, 
           colour=sex)) + 
  geom_point() +
  geom_smooth(se=F) +
  facet_wrap(~age, ncol = 4) +
  scale_color_discrete_divergingx(palette="Zissou 1") +
  scale_x_continuous("year", 
    breaks = seq(2013, 2021, 2), 
    labels = c("13", "15", "17", "19", "21")) +
  theme(axis.text = element_text(size="10")) +
  ggtitle("Arrangement A")
```
:::

::: {.column width=50%}

```{r}
#| fig-width: 7
#| fig-height: 5
ggplot(tb_aus_sa, 
       aes(x = year, y = count, colour = age)) +
  geom_line() + geom_point() +
  facet_wrap(~sex, ncol = 2) +
  scale_color_discrete_divergingx(palette="Zissou 1") +
  scale_x_continuous("year", 
    breaks = seq(2013, 2021, 2), 
    labels = c("13", "15", "17", "19", "21")) +
  theme(axis.text = element_text(size="10")) +
  ggtitle("Arrangement B")
```
:::

::::

## Change blindness

Making comparisons across plots requires the eye to jump from one focal point to another. It may result in not noticing differences. 

:::: {.columns}

::: {.column width=50%}

```{r}
#| fig-width: 5
#| fig-height: 3.5
tb_aus_sa %>%
  filter(age %in% c("45-54", "55-64"),
         sex == "f") %>%
  ggplot(mapping=aes(x=year, 
                 y=count)) + 
  geom_point() +
  geom_smooth(aes(colour=age), se=F, method="lm") +
  facet_wrap(~age, ncol = 2) +
  scale_color_discrete_divergingx(palette="Geyser") +
  scale_x_continuous("year", 
    breaks = seq(2013, 2021, 2), 
    labels = c("13", "15", "17", "19", "21")) +
  theme(legend.position="none",
        axis.text = element_text(size="10"))
  
```

:::

::: {.column width=50% .fragment .center}

<br>
```{r}
#| fig-width: 3
#| fig-height: 3
#| out-width: 60%
tb_aus_sa %>%
  filter(age %in% c("45-54", "55-64"),
         sex == "f") %>%
  ggplot(mapping=aes(x=year, 
                 y=count)) + 
  geom_smooth(aes(colour=age), se=F, method="lm") +
  scale_color_discrete_divergingx(palette="Geyser") +
  scale_x_continuous("year", 
    breaks = seq(2013, 2021, 2), 
    labels = c("13", "15", "17", "19", "21")) +
  theme(legend.position="none",
        axis.text = element_text(size="10"))
  
```

:::
::::

## Exercise

:::: {.columns}
::: {.column width=50%}

Take the following plot, and make it more difficult to read. 

::: {style="font-size: 80%;"}
Think about *what is it you learn from the plot*, and how 

- changing the mapping, 
- using colour, or 
- the geom type 

might change what you learn.
:::
:::

::: {.column width=50%}
```{r}
#| label: electoral
#| echo: true
#| out-width: 70%
library(nullabor)
data(electoral)
ggplot(electoral$polls, 
       aes(x=Democrat, 
           y=Margin)) +
  geom_boxplot()
```
:::

::::

```{r}
#| label: electoral-answers
#| echo: false
#| eval: false
ggplot(electoral$polls,
       aes(x=1,
           y=Margin,
           colour=Democrat)) +
  geom_point()

ggplot(electoral$polls,
       aes(x=Margin,
           fill=Democrat)) +
  geom_histogram()
```

## Take-aways

- Organise your data so that variables are clear
- Clearly map your variables to elements of the plot
- It's ok to make many plots of the same variables
- Use proximity effectively

## Long exercise

This data is downloaded from [ABS Census Datapacks](https://www.abs.gov.au/census/find-census-data/datapacks). For this data the goal is to fix the code below for plotting the distribution of household income across Victorian LGAs.

:::: {.columns}

::: {.column width=50% style="font-size: 70%;"}
1. What are the disadvantages of using the code as is?
2. Rearrange the data into tidy form.
3. Plot facetted histograms of the distribution of counts by household type.
4. Plot the data another way, eg density, boxplot.
5. What do you learn about difference in distributions between family and non-family households? 
:::

::: {.column width=50%}
```{r}
#| eval: false
#| echo: true
file = "data/2021Census_G33_VIC_LGA.csv"
hh_income <- read_csv(file)
ggplot(hh_income) +
  geom_histogram(
    aes(Tot_Family_households))
ggplot(hh_income) +
  geom_histogram(
    aes(Tot_Non_family_households))
```

:::
::::

## Solution to long exercise and more

:::: {.columns}

::: {.column width=50%}

::: {style="font-size: 70%;"}

```{r}
#| message: false
#| code-fold: true
#| code-summary: "Code for answer"
#| echo: true
#| eval: false
file = "data/2021Census_G33_VIC_LGA.csv"
hh_income <- read_csv(file)
hh_tidy <- hh_income %>%
  select(LGA_CODE_2021, 
         Tot_Family_households,
         Tot_Non_family_households) %>% 
  pivot_longer(cols=contains("Tot"), 
                             names_to="hh_type",
                             values_to="count") %>%
  mutate(hh_type = str_remove(hh_type, "Tot_")) %>%
  mutate(hh_type = str_remove(hh_type, "_households")) %>%
  mutate(hh_type = str_remove(hh_type, "_family"))
ggplot(hh_tidy, aes(x=count)) +
  geom_histogram() +
  facet_wrap(~hh_type, ncol=1)
ggplot(hh_tidy, aes(x=count, 
                     colour=hh_type, 
                     fill=hh_type)) +
  geom_density(alpha=0.5) +
  scale_color_discrete_divergingx() +
  scale_fill_discrete_divergingx() 
ggplot(hh_tidy, aes(x=hh_type,
                     y=count)) +
  geom_boxplot() 
ggplot(hh_tidy, aes(x=hh_type,
                     y=count)) +
  geom_quasirandom() 
```
:::
:::

::: {.column width=50%}

::: {style="font-size: 70%;"}

```{r}
#| eval: false
hhi_check <- hh_income %>%
  select(LGA_CODE_2021, 
         contains("_Tot"), -Tot_Tot) %>%
  pivot_longer(cols=contains("Tot"), 
      names_to="income_cat",
      values_to="count") %>%
  group_by(LGA_CODE_2021) %>%
  mutate(p = count/sum(count)) %>%
  dplyr::filter(!(income_cat %in% 
     c("Partial", "All", "Negative"))) %>%
  summarise(sp = sum(p))
```

```{r}
#| message: false
#| code-fold: true
#| code-summary: "Code for proportions"
#| echo: true
#| eval: false
hhi_tidy <- hh_income %>%
  select(LGA_CODE_2021, 
         contains("_Tot"), -Tot_Tot) %>%
  pivot_longer(cols=contains("Tot"), 
      names_to="income_cat",
      values_to="count") %>%
  mutate(income_cat = str_remove(income_cat, "_Tot")) %>%
  mutate(income_cat = str_remove(income_cat, "HI_")) %>%
  mutate(income_cat = str_remove(income_cat, "_Nil_income")) %>%
  mutate(income_cat = str_remove(income_cat, "_income_stated")) %>%
  mutate(income_cat = str_remove(income_cat, "_incomes_not_stated")) %>%
  group_by(income_cat) %>%
  mutate(prop = count/sum(count)) %>%
  dplyr::filter(!(income_cat %in% 
     c("Partial", "All", "Negative"))) %>%
  separate(income_cat, into=c("cmin", "cmax")) %>%
  mutate(cmax = str_replace(cmax, "more", "5000")) %>%
  mutate(income = (as.numeric(cmin) +
           as.numeric(cmax))/2) %>%
  select(-cmin, cmax)

hhi_tidy %>%
  dplyr::filter(LGA_CODE_2021 %in%
     sample(unique(hhi_tidy$LGA_CODE_2021), 8)) %>%
  ggplot(aes(x=income, y=count)) +
    facet_wrap(~LGA_CODE_2021, ncol=4) +
    geom_line()
```
:::
:::

::::

## End of session 1 {.center}

<a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
 
